{"version":3,"file":"badges-block.js","sources":["../../src/blocks/badges-block/block.jsx"],"sourcesContent":["if (typeof wp.blockEditor !== 'undefined') {\r\n    const { registerBlockType, getBlockType } = wp.blocks;\r\n    const { __ } = wp.i18n;\r\n    const { useState, useEffect } = wp.element;\r\n    const apiFetch = wp.apiFetch;\r\n    const { InspectorControls } = wp.blockEditor;\r\n    const { PanelBody, ToggleControl, SelectControl, RangeControl, Placeholder, Spinner, TextControl } = wp.components;\r\n\r\n    // Check if the block is already registered\r\n    if (!getBlockType('pbc/badges-block')) {\r\n        // Register the block\r\n        registerBlockType('pbc/badges-block', {\r\n            title: __('User Badges', 'pathwise-badge-connect'),\r\n            icon: 'awards',\r\n            category: 'widgets',\r\n            attributes: {\r\n                layout: { type: 'string', default: 'grid' },\r\n                showBadgeName: { type: 'boolean', default: true },\r\n                showBadgeImage: { type: 'boolean', default: true },\r\n                columns: { type: 'number', default: 3 },\r\n                imageWidth: { type: 'string', default: '100%' },\r\n                imageMaxWidth: { type: 'string', default: '450px' },\r\n            },\r\n            edit({ attributes, setAttributes }) {\r\n                const { layout, showBadgeName, showBadgeImage, columns, imageWidth, imageMaxWidth } = attributes;\r\n                const [badges, setBadges] = useState(null);\r\n                const [loading, setLoading] = useState(true);\r\n\r\n                useEffect(() => {\r\n                    apiFetch({ path: '/pathwise-badge-connect/v1/user-badges' })\r\n                        .then((data) => {\r\n                            if (data && data.badges) {\r\n                                setBadges(data.badges);\r\n                            } else {\r\n                                setBadges([]); // No badges\r\n                            }\r\n                            setLoading(false);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error('Error fetching badges:', error);\r\n                            setBadges([]); // Handle errors\r\n                            setLoading(false);\r\n                        });\r\n                }, []);\r\n\r\n                if (loading) {\r\n                    return <Placeholder><Spinner /></Placeholder>;\r\n                }\r\n\r\n                return (\r\n                    <>\r\n                        <InspectorControls>\r\n                            <PanelBody title={__('Display Settings', 'pathwise-badge-connect')}>\r\n                                <SelectControl\r\n                                    label={__('Layout', 'pathwise-badge-connect')}\r\n                                    value={layout}\r\n                                    options={[\r\n                                        { label: 'Grid', value: 'grid' },\r\n                                        { label: 'Table', value: 'table' },\r\n                                        { label: 'List', value: 'list' },\r\n                                    ]}\r\n                                    onChange={(newLayout) => setAttributes({ layout: newLayout })}\r\n                                />\r\n                                <ToggleControl\r\n                                    label={__('Show Badge Name', 'pathwise-badge-connect')}\r\n                                    checked={showBadgeName}\r\n                                    onChange={(value) => setAttributes({ showBadgeName: value })}\r\n                                />\r\n                                <ToggleControl\r\n                                    label={__('Show Badge Image', 'pathwise-badge-connect')}\r\n                                    checked={showBadgeImage}\r\n                                    onChange={(value) => setAttributes({ showBadgeImage: value })}\r\n                                />\r\n                                {(layout === 'grid' || layout === 'table') && (\r\n                                    <RangeControl\r\n                                        label={__('Columns', 'pathwise-badge-connect')}\r\n                                        value={columns}\r\n                                        onChange={(newColumns) => setAttributes({ columns: newColumns })}\r\n                                        min={1}\r\n                                        max={5}\r\n                                    />\r\n                                )}\r\n                                {showBadgeImage && (\r\n                                    <>\r\n                                        <TextControl\r\n                                            label={__('Image Width', 'pathwise-badge-connect')}\r\n                                            value={imageWidth}\r\n                                            onChange={(value) => setAttributes({ imageWidth: value })}\r\n                                            help={__('Set the width of the badge image (e.g., 100%, 200px).')}\r\n                                        />\r\n                                        <TextControl\r\n                                            label={__('Image Max Width', 'pathwise-badge-connect')}\r\n                                            value={imageMaxWidth}\r\n                                            onChange={(value) => setAttributes({ imageMaxWidth: value })}\r\n                                            help={__('Set the maximum width of the badge image (e.g., 450px).')}\r\n                                        />\r\n                                    </>\r\n                                )}\r\n                            </PanelBody>\r\n                        </InspectorControls>\r\n                        {layout === 'grid' && (\r\n                            <div className={`pbc-badges-block grid`} style={{ '--columns': columns }}>\r\n                                {badges && badges.length > 0 ? (\r\n                                    badges.map((badge) => (\r\n                                        <div className=\"badge-item\" key={badge.id}>\r\n                                            {showBadgeImage && (\r\n                                                <img\r\n                                                    src={badge.image}\r\n                                                    alt={badge.name}\r\n                                                    style={{ width: imageWidth, maxWidth: imageMaxWidth }}\r\n                                                />\r\n                                            )}\r\n                                            {showBadgeName && <span>{badge.name}</span>}\r\n                                        </div>\r\n                                    ))\r\n                                ) : (\r\n                                    <p>{__('No badges available.', 'pathwise-badge-connect')}</p>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                        {layout === 'table' && (\r\n                            <table className=\"pbc-badges-block table\" style={{'--columns': columns}}>\r\n                                <tbody>\r\n                                {badges && badges.length > 0 ? (\r\n                                    badges.map((badge, index) => {\r\n                                        // Determine if we need to start a new row\r\n                                        const startNewRow = index % columns === 0;\r\n                                        const endRow = (index + 1) % columns === 0 || index === badges.length - 1;\r\n\r\n                                        return (\r\n                                            <>\r\n                                                {startNewRow && <tr key={`row-start-${index}`}/>}\r\n                                                <td className=\"badge-item\" key={index}>\r\n                                                    {showBadgeImage && (\r\n                                                        <img\r\n                                                            src={badge.image}\r\n                                                            alt={badge.name}\r\n                                                            style={{width: imageWidth, maxWidth: imageMaxWidth}}\r\n                                                        />\r\n                                                    )}\r\n                                                    {showBadgeName && <span>{badge.name}</span>}\r\n                                                </td>\r\n                                                {endRow && <tr key={`row-end-${index}`}/>}\r\n                                            </>\r\n                                        );\r\n                                    })\r\n                                ) : (\r\n                                    <tr>\r\n                                        <td>{__('No badges available.', 'pathwise-badge-connect')}</td>\r\n                                    </tr>\r\n                                )}\r\n                                </tbody>\r\n                            </table>\r\n                        )}\r\n                        {layout === 'list' && (\r\n                            <ul className=\"pbc-badges-block list\">\r\n                                {badges && badges.length > 0 ? (\r\n                                    badges.map((badge, index) => (\r\n                                        <li className=\"badge-item\" key={index}>\r\n                                            {showBadgeImage && (\r\n                                                <img\r\n                                                    src={badge.image}\r\n                                                    alt={badge.name}\r\n                                                    style={{width: imageWidth, maxWidth: imageMaxWidth}}\r\n                                                />\r\n                                            )}\r\n                                            {showBadgeName && <span>{badge.name}</span>}\r\n                                        </li>\r\n                                    ))\r\n                                ) : (\r\n                                    <li>{__('No badges available.', 'pathwise-badge-connect')}</li>\r\n                                )}\r\n                            </ul>\r\n                        )}\r\n                    </>\r\n                );\r\n            },\r\n            save() {\r\n                return null; // Dynamic rendering in PHP\r\n            },\r\n        });\r\n    }\r\n}\r\n"],"names":["wp","blockEditor","registerBlockType","getBlockType","blocks","__","i18n","useState","useEffect","element","apiFetch","InspectorControls","PanelBody","ToggleControl","SelectControl","RangeControl","Placeholder","Spinner","TextControl","components","title","icon","category","attributes","layout","type","default","showBadgeName","showBadgeImage","columns","imageWidth","imageMaxWidth","edit","setAttributes","badges","setBadges","loading","setLoading","path","then","data","catch","error","console","React","createElement","Fragment","label","value","options","onChange","newLayout","checked","newColumns","min","max","help","className","style","length","map","badge","key","id","src","image","alt","name","width","maxWidth","index","startNewRow","endRow","save"],"mappings":"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"}