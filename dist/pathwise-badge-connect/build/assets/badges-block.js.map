{"version":3,"file":"badges-block.js","sources":["../../src/blocks/badges-block/block.jsx"],"sourcesContent":["if (typeof wp.blockEditor !== 'undefined') {\r\n    const { registerBlockType, getBlockType } = wp.blocks;\r\n    const { __ } = wp.i18n;\r\n    const { useState, useEffect } = wp.element;\r\n    const apiFetch = wp.apiFetch;\r\n    const { InspectorControls } = wp.blockEditor;\r\n    const { PanelBody, ToggleControl, SelectControl, RangeControl, Placeholder, Spinner, TextControl } = wp.components;\r\n\r\n    // Check if the block is already registered\r\n    if (!getBlockType('pbc/badges-block')) {\r\n        // Register the block\r\n        registerBlockType('pbc/badges-block', {\r\n            title: __('User Badges', 'pathwise-badge-connect'),\r\n            icon: 'awards',\r\n            category: 'widgets',\r\n            attributes: {\r\n                layout: { type: 'string', default: 'grid' },\r\n                showBadgeName: { type: 'boolean', default: true },\r\n                showBadgeImage: { type: 'boolean', default: true },\r\n                columns: { type: 'number', default: 3 },\r\n                imageWidth: { type: 'string', default: '100%' },\r\n                imageMaxWidth: { type: 'string', default: '450px' },\r\n            },\r\n            edit({ attributes, setAttributes }) {\r\n                const { layout, showBadgeName, showBadgeImage, columns, imageWidth, imageMaxWidth } = attributes;\r\n                const [badges, setBadges] = useState(null);\r\n                const [loading, setLoading] = useState(true);\r\n\r\n                useEffect(() => {\r\n                    apiFetch({ path: '/pathwise-badge-connect/v1/user-badges' })\r\n                        .then((data) => {\r\n                            if (data && data.badges) {\r\n                                setBadges(data.badges);\r\n                            } else {\r\n                                setBadges([]); // No badges\r\n                            }\r\n                            setLoading(false);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error('Error fetching badges:', error);\r\n                            setBadges([]); // Handle errors\r\n                            setLoading(false);\r\n                        });\r\n                }, []);\r\n\r\n                if (loading) {\r\n                    return <Placeholder><Spinner /></Placeholder>;\r\n                }\r\n\r\n                return (\r\n                    <>\r\n                        <InspectorControls>\r\n                            <PanelBody title={__('Display Settings', 'pathwise-badge-connect')}>\r\n                                <SelectControl\r\n                                    label={__('Layout', 'pathwise-badge-connect')}\r\n                                    value={layout}\r\n                                    options={[\r\n                                        { label: 'Grid', value: 'grid' },\r\n                                        { label: 'Table', value: 'table' },\r\n                                        { label: 'List', value: 'list' },\r\n                                    ]}\r\n                                    onChange={(newLayout) => setAttributes({ layout: newLayout })}\r\n                                />\r\n                                <ToggleControl\r\n                                    label={__('Show Badge Name', 'pathwise-badge-connect')}\r\n                                    checked={showBadgeName}\r\n                                    onChange={(value) => setAttributes({ showBadgeName: value })}\r\n                                />\r\n                                <ToggleControl\r\n                                    label={__('Show Badge Image', 'pathwise-badge-connect')}\r\n                                    checked={showBadgeImage}\r\n                                    onChange={(value) => setAttributes({ showBadgeImage: value })}\r\n                                />\r\n                                {(layout === 'grid' || layout === 'table') && (\r\n                                    <RangeControl\r\n                                        label={__('Columns', 'pathwise-badge-connect')}\r\n                                        value={columns}\r\n                                        onChange={(newColumns) => setAttributes({ columns: newColumns })}\r\n                                        min={1}\r\n                                        max={5}\r\n                                    />\r\n                                )}\r\n                                {showBadgeImage && (\r\n                                    <>\r\n                                        <TextControl\r\n                                            label={__('Image Width', 'pathwise-badge-connect')}\r\n                                            value={imageWidth}\r\n                                            onChange={(value) => setAttributes({ imageWidth: value })}\r\n                                            help={__('Set the width of the badge image (e.g., 100%, 200px).')}\r\n                                        />\r\n                                        <TextControl\r\n                                            label={__('Image Max Width', 'pathwise-badge-connect')}\r\n                                            value={imageMaxWidth}\r\n                                            onChange={(value) => setAttributes({ imageMaxWidth: value })}\r\n                                            help={__('Set the maximum width of the badge image (e.g., 450px).')}\r\n                                        />\r\n                                    </>\r\n                                )}\r\n                            </PanelBody>\r\n                        </InspectorControls>\r\n                        {layout === 'grid' && (\r\n                            <div className={`pbc-badges-block grid`} style={{ '--columns': columns }}>\r\n                                {badges && badges.length > 0 ? (\r\n                                    badges.map((badge) => (\r\n                                        <div className=\"badge-item\" key={badge.id}>\r\n                                            {showBadgeImage && (\r\n                                                <img\r\n                                                    src={badge.image}\r\n                                                    alt={badge.name}\r\n                                                    style={{ width: imageWidth, maxWidth: imageMaxWidth }}\r\n                                                />\r\n                                            )}\r\n                                            {showBadgeName && <span>{badge.name}</span>}\r\n                                        </div>\r\n                                    ))\r\n                                ) : (\r\n                                    <p>{__('No badges available.', 'pathwise-badge-connect')}</p>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                        {layout === 'table' && (\r\n                            <table className=\"pbc-badges-block table\" style={{'--columns': columns}}>\r\n                                <tbody>\r\n                                {badges && badges.length > 0 ? (\r\n                                    badges.map((badge, index) => {\r\n                                        // Determine if we need to start a new row\r\n                                        const startNewRow = index % columns === 0;\r\n                                        const endRow = (index + 1) % columns === 0 || index === badges.length - 1;\r\n\r\n                                        return (\r\n                                            <>\r\n                                                {startNewRow && <tr key={`row-start-${index}`}/>}\r\n                                                <td className=\"badge-item\" key={index}>\r\n                                                    {showBadgeImage && (\r\n                                                        <img\r\n                                                            src={badge.image}\r\n                                                            alt={badge.name}\r\n                                                            style={{width: imageWidth, maxWidth: imageMaxWidth}}\r\n                                                        />\r\n                                                    )}\r\n                                                    {showBadgeName && <span>{badge.name}</span>}\r\n                                                </td>\r\n                                                {endRow && <tr key={`row-end-${index}`}/>}\r\n                                            </>\r\n                                        );\r\n                                    })\r\n                                ) : (\r\n                                    <tr>\r\n                                        <td>{__('No badges available.', 'pathwise-badge-connect')}</td>\r\n                                    </tr>\r\n                                )}\r\n                                </tbody>\r\n                            </table>\r\n                        )}\r\n                        {layout === 'list' && (\r\n                            <ul className=\"pbc-badges-block list\">\r\n                                {badges && badges.length > 0 ? (\r\n                                    badges.map((badge, index) => (\r\n                                        <li className=\"badge-item\" key={index}>\r\n                                            {showBadgeImage && (\r\n                                                <img\r\n                                                    src={badge.image}\r\n                                                    alt={badge.name}\r\n                                                    style={{width: imageWidth, maxWidth: imageMaxWidth}}\r\n                                                />\r\n                                            )}\r\n                                            {showBadgeName && <span>{badge.name}</span>}\r\n                                        </li>\r\n                                    ))\r\n                                ) : (\r\n                                    <li>{__('No badges available.', 'pathwise-badge-connect')}</li>\r\n                                )}\r\n                            </ul>\r\n                        )}\r\n                    </>\r\n                );\r\n            },\r\n            save() {\r\n                return null; // Dynamic rendering in PHP\r\n            },\r\n        });\r\n    }\r\n}\r\n"],"names":["wp","blockEditor","registerBlockType","getBlockType","blocks","__","i18n","useState","useEffect","element","apiFetch","InspectorControls","PanelBody","ToggleControl","SelectControl","RangeControl","Placeholder","Spinner","TextControl","components","title","icon","category","attributes","layout","type","default","showBadgeName","showBadgeImage","columns","imageWidth","imageMaxWidth","edit","setAttributes","badges","setBadges","loading","setLoading","path","then","data","catch","error","console","React","createElement","Fragment","label","value","options","onChange","newLayout","checked","newColumns","min","max","help","className","style","length","map","badge","key","id","src","image","alt","name","width","maxWidth","index","startNewRow","endRow","save"],"mappings":"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"}